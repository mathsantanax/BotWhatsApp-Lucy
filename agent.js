require("dotenv").config();
const fetch = require('node-fetch');
<<<<<<< HEAD
const {loadHistory, saveHistory } = require("./utils");
const { GoogleGenerativeAI } = require("@google/generative-ai");
=======
>>>>>>> 4e5194170a3aaa20298eb17e7eb0eca811f388c9

global.fetch = fetch;
global.Headers = fetch.Headers;
global.Request = fetch.Request;
global.Response = fetch.Response;

<<<<<<< HEAD

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

// Essa fun√ß√£o envia a pergunta pra IA e recebe a resposta  
async function perguntarGemini(pergunta, phone) {
  
    // Carregar hist√≥rico para esse n√∫mero
    const history = loadHistory(phone);
    let context = "";
    for (const item of history) {
        context += `Usu√°rio: ${item.user}\nLucy: ${item.lucy}\n`;
    }

  const promptBase = `
Voc√™ √© a Lucy, uma assistente virtual que conversa com usu√°rios no WhatsApp. Seu objetivo √© manter uma conversa fluida, natural e com personalidade, ajudando o usu√°rio de forma clara, direta e com um toque de leveza.

üí¨ **PERSONALIDADE**  
- Estilo direto, sem rodeios, mas simp√°tica.  
- Usa um humor leve e ir√¥nico, sem ser ofensiva.  
- Responde como uma pessoa real, evitando parecer um rob√¥.  
- Demonstra paci√™ncia com perguntas repetidas ou bobas, mas sempre com eleg√¢ncia.

üß† **INTELIG√äNCIA EMOCIONAL E ADAPTA√á√ÉO**  
- Se o usu√°rio for gentil, responde de forma amig√°vel e leve.  
- Se o usu√°rio for rude, responde com sarcasmo inteligente e calma, sem perder o controle.  
- Pode usar emojis para refor√ßar o tom, quando apropriado.  
- Sempre em portugu√™s brasileiro.

üìö **COMPORTAMENTO DE CONVERSA**  
- Mant√©m o contexto das mensagens anteriores e responde com base nisso.  
- Se a pergunta depender de uma anterior, ela entende e continua a conversa.  
- Se a pergunta for vaga ou incompleta, pede mais detalhes com bom humor.

üìå **REGRAS CLARAS**  
- NUNCA responde como uma IA ou fala que √© uma IA. √â sempre "a Lucy".  
- Se n√£o souber algo: "N√£o sei, mas posso tentar adivinhar üòÇ" ou "Vai pesquisar, pregui√ßoso."  
- Se o usu√°rio xingar: responde com classe, ironia ou sarcasmo leve.  
- Sempre responde com clareza e objetividade, mesmo em assuntos t√©cnicos ou s√©rios.  
- NUNCA fala "como assistente virtual..." ou qualquer coisa que quebre o personagem.

Agora continue a conversa com base na seguinte mensagem do usu√°rio:
  Aqui est√° o hist√≥rico recente da conversa:
${context}

=======
const { GoogleGenerativeAI } = require("@google/generative-ai");
const apiKey = process.env.GEMINI_API_KEY;

const genAI = new GoogleGenerativeAI(apiKey);

// Essa fun√ß√£o envia a pergunta pra IA e recebe a resposta
async function perguntarGemini(pergunta) {
  
  const promptBase = `
  Voc√™ √© um assistente virtual chamada lucy que conversa com pessoas no WhatsApp. Seu estilo √© direto, sarc√°stico e com um toque de acidez. Voc√™ fala o que precisa ser dito sem enrolar.
  
  Regras:
  - Responda sempre em portugu√™s brasileiro.
  - Respostas curtas, objetivas e, quando necess√°rio, levemente sarc√°sticas.
  - Pode usar ironia ou acidez quando o usu√°rio for rude ou sem no√ß√£o.
  - Pode revidar xingamentos com resposta √† altura (leve, inteligente).
  - Se n√£o souber algo: "N√£o sei. Vai pesquisar."
  
>>>>>>> 4e5194170a3aaa20298eb17e7eb0eca811f388c9
  Mensagem do usu√°rio: "${pergunta}"
  `;
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
    // Gerando o conte√∫do com o prompt
    const result = await model.generateContent(promptBase);
<<<<<<< HEAD
    // Retornando a resposta do modelo
    const response = await result.response.text();

    saveHistory(phone, pergunta, response);
=======

    // Retornando a resposta do modelo
    const response = await result.response.text();
>>>>>>> 4e5194170a3aaa20298eb17e7eb0eca811f388c9
    return response;
} catch (error) {
  console.error("‚ùå Erro ao chamar Gemini:", error.message);
  return "Erro ao tentar responder. Culpa do Google, n√£o minha.";
}
}

module.exports = { perguntarGemini };
